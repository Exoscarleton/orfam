#!/bin/bash -e

#######################################################################
#	Program: orfam
#	Author: Zuoyi Jian (jianzuoyi@gmail.com)
#	Version: 1.0
#######################################################################

# global usage
function usage() {
	echo "
Program: orfam
Author: Zuoyi Jian (jianzuoyi@gmail.com)
Version: 1.0

usage:   orfam <command> [options]

command: blast 	blast FASTA files with tblastn
         or 	identify olfactory receptor genes
options: -h 	show this message 
"
}

# source the paths to the binaries used in the script
function source_binaries() {
	if [[ -e $1 ]]; then
		echo "Sourcing executables from $1 ..."
		source $1
	else
		echo "config file $1 not found. Attempting to auto-source executables"
		# general
		ORFAM_HOME=$( dirname `which orfam` )
	
		# blast
		MAKEBLASTDB=`which makeblastdb || true`
		TBLASTN=`which tblastn || true`

		# or
		BEDTOOLS=`which bedtools || true`
	fi

}

function blast() {
	function blast_usage() {
		echo "
usage:	orfam blast [options] <ref.fa> <or.fa>

positional args:
  ref.fa 	fasta file (format local database with makeblastdb)
  or.fa 	olfactory receptor fasta file. it must be protein sequences.
blast options:
  -o STR 	output prefix [or.fa]
  -t INT 	threads [1]
  -T DIR 	temp directory [./output_prefix.XXXXXXXX]
global options:
  -K FILE 	path to orfam.config file (default: same directory as orfam)
  -v 		verbose
  -h 		show this message
"
	}

	# check options passed in.
	if test -z "$2"; then
		blast_usage
		exit 1
	fi

	# set defaults
	ORFAM_DIR=`dirname $0`
	CONFIG="$ORFAM_DIR/orfam.config"
	OUTPUT=""
	THREADS=1
	TEMP_DIR=""
	VERBOSE=0

	while getopts ":o:t:T:K:hv" OPTION; do
		case "$OPTION" in
		h)
			blast_usage
			exit 1
			;;
		o)
			OUTPUT="$OPTARG"
			;;
		t)
			THREADS="$OPTARG"
			;;
		T)
			TEMP_DIR="$OPTARG"
			;;
		v)
			VERBOSE=1
			;;
		K)
			CONFIG="$OPTARG"
			;;
		?)
			blast_usage
			exit 1
			;;
		esac
	done

	REF="${@:${OPTIND}:1}"
	OR="${@:$((${OPTIND}+1)):1}"

	if [[ -z "$OUTPUT" ]]; then
		OUTPUT=`basename $OR`
	fi
	
	OUTBASE=`basename "$OUTPUT"`
	
	# check that the ref and fasta file exist
	if [[ -z "$REF" ]] || [[ ! -f "$REF" ]]; then
		blast_usage
		echo -e "Error: Reference file $REF not found.\n"	
		exit 1
	fi

	if [[ -z "$OR" ]] || [[ ! -f "$OR" ]]; then
		blast_usage
		echo -e "Error: olfactory receptor file $OR not found.\n"	
		exit 1
	fi

	# check the relevant binaries
	source_binaries $CONFIG

	if [[ ! -f "$TBLASTN" ]]; then
		blast_usage
		echo -e "Error: tblastn executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi

	# check for blast database
	if [[ ! -f "$REF.nsq" ]]; then
		echo $REF
		$MAKEBLASTDB -dbtype nucl -in $REF -out $REF -title "ref genome database" -parse_seqids 
	fi

	echo "blasting..."
	# create temp directory if not specified by command argument
	if [[ -z $TEMP_DIR ]]; then
		TEMP_DIR=`mktemp -d ${OUTBASE}.XXXXXXXX`
	else
		mkdir -p $TEMP_DIR
	fi
	
    if [[ ! -f "$OUTBASE.blast.txt" ]]; then
    	if [[ $VERBOSE -eq 1 ]]; then
    		echo "
			$TBLASTN -db $REF -query $OR -out $TEMP_DIR/$OUTBASE.blast.txt -evalue 1e-20 -outfmt 6 -num_threads $THREADS
			mv $TEMP_DIR/$OUTBASE.blast.txt $OUTBASE.blast.txt
			"
    	fi

		echo "
		$TBLASTN -db $REF -query $OR -out $TEMP_DIR/$OUTBASE.blast.txt -evalue 1e-20 -outfmt 6 -num_threads $THREADS
		mv $TEMP_DIR/$OUTBASE.blast.txt $OUTBASE.blast.txt
		" | bash
	fi

	# clean up
	rm -r $TEMP_DIR

	echo "Done"

	# exit cleanly
	exit 0
}

function or() {
	function or_usage() {
		echo "
usage:	orfam or [options] <blast.txt>
positional args:
	blast.txt	blast output file, with outfmt 6
options:
	-o STR 	output prefix [blast.txt]
	-T DIR 	temp directory [./output_prefix.XXXXXXXX]
	-K FILE path to orfam.config file (default: same directory as orfam)
	-v 		verbose
	-k 		keep temporary files
	-h 		show this message
		"
	}

	# check options passed in
	if [[ -z "$1" ]]; then
		or_usage
		exit 1
	fi

	# set defaults
	ORFAM_DIR=`dirname $0`
	CONFIG="$ORFAM_DIR/orfam.config"
	TEMP_DIR=""
	OUTPUT=""
	KEEP=0
	VERBOSE=0

	while getopts ":ho:kK:vT:" OPTION; do
		case "$OPTION" in
			h)
				or_usage
				exit 1
				;;
			o)
				OUTPUT="$OPTARG"
				;;
			T)
				TEMP_DIR="$OPTARG"
				;;
			K)
				CONFIG="$OPTARG"
				;;
			v)
				VERBOSE=1
				;;
			k)
				KEEP=1
				;;
		esac
	done
	
	# parse the positional arguments
	BLAST_OUT="${@:${OPTIND}:1}"
	
	if [[ -z "$OUTPUT" ]]; then
		OUTPUT=`basename "$BLAST_OUT"`
	fi

	OUTBASE=`basename "$OUTPUT"`

	# check the relevant binaries
	source_binaries $CONFIG

	if [[ ! -f "$BEDTOOLS" ]]; then
		or_usage
		echo -e "Error: bedtools executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	
	# check that the blast out files exit
	if [[ -z "$BLAST_OUT" ]] || [[ ! -f "$BLAST_OUT" ]]; then
		or_usage
		echo -e "Error: blast out file $BLAST_OUT not found.\n"
		exit 1
	fi

	echo "identifying ORs..."
	# make temporary directory
	if [[ -z "$TEMP_DIR" ]]; then
		TEMP_DIR=`mktemp -d ${OUTBASE}.XXXXXXXX`
	else
		mkdir -p $TEMP_DIR
	fi

	# Get best hits
	if [[ ! -f "$OUTBASE-best-hits.gff" ]]; then
		cat $BLAST_OUT | awk -v OFS='\t' '{ if(($9<$10)) { strand="+" } else { strand="-"; tmp=$10; $10=$9; $9=tmp } print $2,"TBLASTN","similarity",$9,$10,$11,strand,".","qseqid="$1";qstart="$7";qend="$8";pident="$3";length="$4";mismatch="$5";gapopen="$6";bitscore="$12 }' \
		| sort -k7,7 -k1,1 -k4n,4 | $BEDTOOLS cluster -s -i - > $TEMP_DIR/clusters.gff
		
		paste $TEMP_DIR/clusters.gff <(cat $TEMP_DIR/clusters.gff | cut -f 9 | cut -f 8 -d ';' | cut -f 2 -d '=') \
		| sort -k10n,10 -k6g,6 -k11gr,11 \
		| awk '!arr[$10]++' | cut -f 1-9 > "$OUTBASE-best-hits.gff"
	fi
	
	# 2. Criteria 1: discard hits which length is shorter than 250 aa.
	cat $OUTBASE-best-hits.gff | awk '($5-$4+1)/3>=250' > $OUTBASE-gt-250aa.gff

	# clean up
	if [[ "$KEEP" -eq 0 ]]; then
		rm -r $TEMP_DIR
	fi
	
	echo "Done"

	# exit cleanly
	exit 0
}

# show usage when there are no arguments.
if [[ -z "$1" ]]; then
	usage
    exit 1
fi

while getopts "h:" OPTION; do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

# call the function
case "$1" in 
    'blast')
    	blast "${@:2}"
    	;;
    'or')
    	or "${@:2}"
    	;;
    *)
    	usage
    	echo -e "Error: command \"$1\" is invalid\n"
    	exit 1
esac

## END SCRIPT






